package com.example.visitor.controller;

import java.util.List;
import java.util.*;
import javax.activation.*;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.example.visitor.dto.visitorDTO;
import com.example.visitor.repository.visitorRepository;
import com.example.visitor.service.VisitorService;

@RestController
public class visitorController {
	@Autowired 
	VisitorService vss;
	@Autowired
	visitorRepository vr;
	@RequestMapping(value="/api/", method=RequestMethod.POST, consumes=MediaType.APPLICATION_JSON_VALUE)
	public String saveData(@RequestBody visitorDTO visitor) {
		
		String to = "mk879756@gmail.com";
	      // Sender's email ID needs to be mentioned
	      String from = "kameshburde36@gmail.com";
	      // Assuming you are sending email from localhost
	      String host = "localhost";
	      // Get system properties
	      Properties properties = System.getProperties();
	      // Setup mail server
	      properties.setProperty("mail.smtp.host", host);
	      // Get the default Session object.
	      Session session = Session.getDefaultInstance(properties);
	      try {
	         // Create a default MimeMessage object.
	         MimeMessage message = new MimeMessage(session);
	         // Set From: header field of the header.
	         message.setFrom(new InternetAddress(from));
	         // Set To: header field of the header.
	         message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));
	         // Set Subject: header field
	         message.setSubject("This is the Subject Line!");
	         // Now set the actual message
	         message.setText("This is actual message");
	         // Send message
	         Transport.send(message);
	         System.out.println("Sent message successfully....");
	      } catch (MessagingException mex) {
	         mex.printStackTrace();
	      }
	      return vss.saveData(visitor);
	}
}

/*public static void main(String [] args) {    
    // Recipient's email ID needs to be mentioned.
    String to = "abcd@gmail.com";

    // Sender's email ID needs to be mentioned
    String from = "web@gmail.com";

    // Assuming you are sending email from localhost
    String host = "localhost";

    // Get system properties
    Properties properties = System.getProperties();

    // Setup mail server
    properties.setProperty("mail.smtp.host", host);

    // Get the default Session object.
    Session session = Session.getDefaultInstance(properties);

    try {
       // Create a default MimeMessage object.
       MimeMessage message = new MimeMessage(session);

       // Set From: header field of the header.
       message.setFrom(new InternetAddress(from));

       // Set To: header field of the header.
       message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));

       // Set Subject: header field
       message.setSubject("This is the Subject Line!");

       // Now set the actual message
       message.setText("This is actual message");

       // Send message
       Transport.send(message);
       System.out.println("Sent message successfully....");
    } catch (MessagingException mex) {
       mex.printStackTrace();
    }
 }*/




/*
@RestController
public class HotelSearchController {

	@Autowired
	HotelSearchService hss;
	@Autowired
	HotelSearchRepo hr;
	
	@RequestMapping(value="/api/{str}", method=RequestMethod.GET, produces=MediaType.APPLICATION_JSON_VALUE)
	public List<String> cityNames( @PathVariable String str){
		return hss.cityNames(str);
	}
	
	@RequestMapping(value="/api/hotel/{id}", method=RequestMethod.GET, produces=MediaType.APPLICATION_JSON_VALUE)
	public HotelReview hotelReview( @PathVariable int id){
		return hss.hotelReview(id);
	}
	
	@RequestMapping(value="/api/city/{city}", method=RequestMethod.GET, produces=MediaType.APPLICATION_JSON_VALUE)
	public List<NamesOfHotels> hotelList( @PathVariable String city){
		return hss.hotelList(city);
	}

*/